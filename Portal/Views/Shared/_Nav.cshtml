@{ 
	bool onlyIntranet = ViewBag.OnlyIntranet ?? false;
	bool hasUnseenDirectiveDocuments = ViewBag.HasUnseenDirectiveDocuments ?? false;
}

<div class="nav">
	<a href="~/">ГЛАВНАЯ</a>
	<div class="nav_block">
		<a>О ФИЛИАЛЕ</a>
		<div>
			<a href="~/docs/О_филиале/Официальное_наименование/">Официальное наименование "Витебская ТЭЦ" РУП "Витебскэнерго", почтовый адрес, адрес электронной почты, банковские реквизиты</a>
			<a href="~/docs/О_филиале/Структура/">Структура филиала "Витебская ТЭЦ" РУП "Витебскэнерго"</a>
			<a href="~/docs/О_филиале/Задачи_и_функции/">Задачи и функции  филиала "Витебская ТЭЦ"  РУП "Витебскэнерго"</a>
			<a href="~/docs/О_филиале/Руководители/">Сведения о руководителях  филиала "Витебская ТЭЦ"  РУП "Витебскэнерго"</a>
			<a href="~/docs/О_филиале/История/">История филиала</a>
			<a href="~/docs/О_филиале/Ветераны ТЭЦ/">Ветераны ТЭЦ</a>
			<a href="~/docs/О_филиале/Доска_почета/">Доска почета</a>
			<a href="~/docs/О_филиале/Документы/">Официальные документы</a>
		</div>
	</div>
	<div class="nav_block">
		<a>ОБРАЩЕНИЯ</a>
		<div>
			<a href="~/docs/Обращения/Запись_на_прием/">Запись на прием к руководству</a>
			<a href="~/docs/Обращения/График_приема/">График личного приема граждан, в том числе индивидуальных предпринимателей, их представителей, представителей юридических лиц</a>
			<a href="~/docs/Обращения/Порядок_рассмотрения/">Порядок рассмотрения обращений</a>
			<a href="https://xn--80abnmycp7evc.xn--90ais/">Электронное обращение</a>
			<a href="~/docs/Обращения/Горячая_линия/">Телефоны "Горячей линии"</a>
			<a href="~/docs/Обращения/Вышестоящая_организация/">Вышестоящая организация</a>
			<a href="~/docs/Обращения/Нормативно-правовые_акты/">Нормативно-правовые акты</a>
		</div>
	</div>
	<div class="nav_block">
		<a>АДМИНИСТРАТИВНЫЕ ПРОЦЕДУРЫ</a>
		<div>
			<a href="~/docs/Административные_процедуры/Перечень/">Перечень административных процедур</a>
			<a href="~/docs/Административные_процедуры/Бланки/">Формы (бланки) документов, необходимых для обращения, порядок их заполнения и представления</a>
			<a href="~/docs/Административные_процедуры/Специалисты/">Специалисты филиала осуществляющие прием заявлений заинтересованных лиц</a>
			<a href="~/docs/Административные_процедуры/Вышестоящая_организация/">Вышестоящая организация</a>
			<a href="~/docs/Административные_процедуры/Нормативно-правовые_акты/">Нормативно-правовые акты</a>
		</div>
	</div>
	@if (onlyIntranet)
	{
	<div class="nav_block">
		<a href="~/directive">ДИРЕКТИВА №1<span id="directive-new" style="margin-left: 5px; color: #ff4700; text-shadow: 0 0 10px #ff4700; display: @(hasUnseenDirectiveDocuments ? "inline" : "none");">new</span></a>
	</div>
	}
	<div class="nav_block">
		<a>ДЕЯТЕЛЬНОСТЬ</a>
		<div>
			<a href="~/docs/Деятельность/О_товарах,_работах,_услугах/">Порядок реализации</a>
			<a href="~/docs/Деятельность/Противодействие коррупции/">Противодействие коррупции</a>
			<a href="~/docs/Деятельность/Закупки/">Закупки</a>
			<a href="~/docs/Деятельность/Входной_контроль/">Входной контроль</a>
			<a href="~/docs/Деятельность/Единый_день_информирования/">Единый день информирования</a>
			<a href="http://www.vitebsk.energo.net/OTD/IDEOL/polit.htm">ЕДИ - РУП Витебскэнерго</a>
			<a href="~/docs/Деятельность/Отдых/">Отдых, оздоровление</a>
			<a href="~/docs/Деятельность/Профком/">Профком</a>
			<a href="~/docs/Деятельность/БРСМ/">БРСМ</a>
			<a href="~/docs/Деятельность/Здоровый_образ_жизни/">Здоровый образ жизни</a>
			<a href="~/docs/Деятельность/Планы развития филиала/">Планы развития филиала</a>
			<a href="~/docs/Деятельность/Директива1">Директива №1</a>
			<a href="~/docs/Деятельность/Социальная реклама">Социальная реклама</a>
		</div>
	</div>
	<div class="nav_block">
		<a>РЕСУРСЫ</a>
		<div>
			<a href="~/docs/Ресурсы/Карты оценки опасностей и рисков/">Карты оценки опасностей и рисков</a>
			<a href="~/docs/Ресурсы/Реестр экологической информации/">Реестр экологической информации</a>
		</div>
	</div>
	<div class="nav_block" style="direction: rtl;">
		<a>КОНТАКТЫ</a>
		<div style="text-align: left;">
			<a href="~/phonebook/">Телефонный справочник</a>
			<a href="~/docs/Контакты/Обратная_связь/">Обратная связь</a>
		</div>
	</div>
</div>

<script>
	var blocks = document.querySelectorAll('.nav_block')
	for (var i = 0; i < blocks.length; i++) {
		blocks[i].onmouseenter = function () {
			this.className = 'open'
		}
		blocks[i].onmouseleave = function () {
			this.className = ''
		}
	}
</script>

<a class="header" href="~/">
	<img src="~/Content/images/logo.svg" style="height: 60px" />
	@*<div>Государственное производственное объединение электроэнергетики "Белэнерго"</div>
	<div>Витебской республиканское унитарное предприятие электроэнергетики "Витебскэнерго"</div>
	<div><span>Филиал "Витебская ТЭЦ" РУП "Витебскэнерго"</span></div>*@
</a>

@*<style>

	.layout {
		top: 9em;
	}

	.content {
		margin-top: 11em;
	}

	.nav, nav_block {
		z-index: 3;
	}

	.lights {
		position: absolute;
		top: 92px;
		left: 0;
		height: 50px;
		right: 0;
		overflow: hidden;
		display: flex;
		flex-wrap: wrap;
		box-sizing: border-box;
	}

		.lights * {
			box-sizing: border-box;
		}

		.lights .led {
			position: relative;
			height: 50px;
			width: 50px;
		}

		.lights .led::after {
			content: "";
			border-top: 2px solid #111;
			position: absolute;
			top: 0;
			width: 50px;
			border-radius: 43px;
			height: 30px;
			left: 25px;
			z-index: 0;
		}

		.lights .led::before {
			content: "";
			border-top: 2px solid #111;
			position: absolute;
			top: 0;
			width: 50px;
			border-radius: 43px;
			height: 30px;
			left: -25px;
			z-index: 0;
		}

		.lights .patron {
			position: absolute;
			background-color: #111;
			height: 8px;
			width: 12px;
			left: 19px;
			top: 8px;
			z-index: 2;
		}

		.lights .lamp {
			position: absolute;
			top: 15px;
			left: 15px;
			background-color: #555;
			width: 20px;
			height: 20px;
			border-radius: 10px;
			text-align: center;
			transition: background-color .4s ease, box-shadow .4s ease;
			transition-duration: 1s;
			z-index: 1;
		}

		.lights .red {
			background-color: #fa5151 !important;
			box-shadow: 0 0 15px 3px #fa5151 !important;
		}

		.lights .green {
			background-color: #39f762 !important;
			box-shadow: 0 0 15px 3px #39f762 !important;
		}

		.lights .blue {
			background-color: #2280fc !important;
			box-shadow: 0 0 15px 3px #2280fc !important;
		}

		.lights .yellow {
			background-color: #ecdf20 !important;
			box-shadow: 0 0 15px 3px #ecdf20 !important;
		}

		.lights .violet {
			background-color: #b337be !important;
			box-shadow: 0 0 15px 3px #b337be !important;
		}

		.lights .buttons {
			position: relative;
			top: 60px;
		}

		.lights .button {
			position: absolute;
			left: 13px;
			top: 10px;
			width: 26px;
			height: 26px;
			border-radius: 5px;
			background-color: #444;
			border: 1px solid #000;
			z-index: 1;
		}

		.lights .button-text {
			position: absolute;
			left: 4px;
			top: 4px;
			width: 16px;
			height: 16px;
			border-radius: 8px;
			border: 2px solid #f77e37;
			z-index: 1;
		}

		.lights .button:hover {
			background-color: #6a5035;
			cursor: pointer;
		}

	.theme_white .lights .led::before,
	.theme_white .lights .led::after {
		border-color: #aaa;
	}

	.theme_white .lights .patron {
		background-color: #666;
	}

	.theme_white .lights .button {
		background-color: #ddd;
		border-color: #666;
	}

		.theme_white .lights .button:hover {
			background-color: #ffdba5;
		}

	.theme_white .lights .lamp {
		background-color: #ccc;
	}
</style>
<div class="lights">
	<div class="led">
		<div class="button" onclick="change()" title="Нажмите для изменения режима">
			<div class="button-text"></div>
		</div>
	</div>
</div>
<script>
	let interval = 0
	let colors = ['red', 'yellow', 'green', 'blue', 'violet']
	let lights = document.querySelector('.lights')

	let rect = document.body.getBoundingClientRect()
	let count = Math.round(rect.width / 50)

	for (let i = 0; i < count; i++) {
		lights.insertAdjacentHTML('beforeEnd', `
				<div class="led">
					<div class="patron"></div>
					<div class="lamp off"></div>
				</div>
			`)
	}

	const model = Array
		.from(document.querySelectorAll('.lamp'))
		.map((x, index) => ({
			el: x,
			index: index,
			count: 0,
			color: -1,
			isOff: getCookie('lights-' + index) == 'true'
		}))

	let mode = getCookie('lights-mode')
	if (mode == 'off') off()
	else if (mode == 'waves') waves()
	else if (mode == 'dimmer') dimmer()
	else simple()

	model.forEach(x => {
		x.el.onclick = function () {
			x.isOff = !x.isOff
			setCookie('lights-' + x.index, x.isOff ? 'true' : 'false', { expires: 9999999999 })
			if (x.isOff) x.el.className = 'lamp'
		}
	})

	function clear(duration) {
		clearInterval(interval)
		let initialCount = 4
		model.forEach(x => {
			x.count = initialCount--
			x.color = -1
			x.el.className = 'lamp'
			x.el.style.backgroundColor = ''
			x.el.style.boxShadow = ''
			x.el.style.transitionDuration = duration || '.4s'
		})
	}

	function change() {
		if (mode == 'simple') waves()
		else if (mode == 'waves') dimmer()
		else if (mode == 'dimmer') off()
		else simple()
	}

	function simple() {

		mode = 'simple'
		setCookie('lights-mode', 'simple', { path: '/', expires: 9999999999 })

		//let palette = [
		//	'220 20 60',
		//	'255 0 0',
		//	'178 34 34',
		//	'255 105 180',
		//	'255 20 147',
		//	'199 21 133',
		//	'255 127 80',
		//	'255 69 0',
		//	'255 165 0',
		//	'173 255 47',
		//	'0 255 0',
		//	'50 205 50',
		//	'0 250 154',
		//	'34 139 34',
		//	'0 128 0',
		//	'32 178 170',
		//	'0 139 139',
		//	'218 165 32',
		//	'184 134 11',
		//	'210 105 30',
		//	'160 82 45',
		//	'165 42 42',
		//	'0 255 255',
		//	'64 224 208',
		//	'0 191 255',
		//	'123 104 238',
		//	'0 0 255'
		//]

		clear()
		tick()
		interval = setInterval(tick, 1000)

		function tick() {
			model.forEach(x => {
				let newColor = x.color
				while (newColor == x.color) {
					newColor = Math.round(Math.random() * (colors.length - 1))
					//console.log(Math.round(Math.random() * colors.length))
				}
				x.color = newColor
				if (!x.isOff) {
					//x.el.style.backgroundColor = newColor
					//x.el.style.boxShadow = '0 0 15px 3px '+ newColor
					x.el.className = 'lamp ' + colors[newColor]
				}
				else {
					//x.el.style.backgroundColor = ''
					//x.el.style.boxShadow = ''
					x.el.className = 'lamp'
				}
			})
		}
	}

	function waves() {

		mode = 'waves'
		setCookie('lights-mode', 'waves', { path: '/', expires: 9999999999 })

		clear()
		tick()
		interval = setInterval(tick, 100)

		function tick() {
			model.forEach(x => {
				x.count++
				if (x.count > 4) {
					x.count = 0
					x.color++
					if (x.color == colors.length) x.color = 0
					if (!x.isOff) x.el.className = 'lamp ' + colors[x.color]
					else x.el.className = 'lamp'
				}
			})
		}
	}

	function dimmer() {

		mode = 'dimmer'
		setCookie('lights-mode', 'dimmer', { path: '/', expires: 9999999999 })

		clear('2s')

		let isFade = false
		let currentColor = -1

		tick()
		interval = setInterval(tick, 2000)

		function tick() {
			if (isFade) {
				let newColor = currentColor
				while (newColor == currentColor) {
					newColor = Math.round(Math.random() * (colors.length - 1))
				}
				currentColor = newColor
				model.forEach(x => {
					if (!x.isOff) x.el.className = 'lamp ' + colors[currentColor]
					else x.el.className = 'lamp'
				})
			}
			else {
				model.forEach(x => {
					if (!x.isOff) x.el.className = 'lamp'
					else x.el.className = 'lamp'
				})
			}

			isFade = !isFade
		}
	}

	function off() {
		mode = 'off'
		setCookie('lights-mode', 'off', { path: '/', expires: 9999999999 })
		clear('.4s')
	}

	function getCookie(name) {
		var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"))
		return matches ? decodeURIComponent(matches[1]) : undefined
	}

	function setCookie(name, value, options) {
		options = options || {}
		var expires = options.expires
		options.SameSite = "Lax"
		if (typeof expires == "number" && expires) {
			var d = new Date()
			d.setTime(d.getTime() + expires * 1000)
			expires = options.expires = d
		}
		if (expires && expires.toUTCString) options.expires = expires.toUTCString()
		value = encodeURIComponent(value)
		var updatedCookie = name + "=" + value
		for (var propName in options) {
			updatedCookie += "; " + propName
			var propValue = options[propName]
			if (propValue !== true) updatedCookie += "=" + propValue
		}
		document.cookie = updatedCookie
	}

</script>*@